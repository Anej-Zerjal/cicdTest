name: local-ci

on:
    push:
    pull_request:

env:
    HA_VERSION: "2025.5.3"
    HAOS_PROJECT_WORKSPACE: /tmp/kronoterm_voice_actions_ci_workspace

jobs:
    # # ───────────────────────── Unit tests (GitHub Runner) ──────────────────────────
    # matcher_unit_tests:
    #     runs-on: ubuntu-latest
    #     strategy:
    #         matrix:
    #             python: ["3.13"]

    #     steps:
    #         - uses: actions/checkout@v4

    #         - uses: actions/setup-python@v5
    #           with:
    #               python-version: ${{ matrix.python }}
    #               cache: "pip"

    #         - name: Install deps
    #           run: |
    #               python -m pip install -U pip
    #               pip install -e ".[test]" "homeassistant==${HA_VERSION}"

    #         - name: Run unit tests + coverage
    #           run: |
    #               # Run pytest specifically on the 'test' directory
    #               pytest -v --cov=src/kronoterm_voice_actions --cov-report=xml src/kronoterm_voice_actions/test/

    # ───────────────────────── Target machine tests (Self-Hosted) ───────────────────
    target_machine_tests:
        runs-on: [self-hosted, Linux, ARM] # Ensure your runner has these labels
        # needs: matcher_unit_tests

        steps:
            - uses: actions/checkout@v4

            - name: Sync integration to HAOS
              run: |
                  # Sync the whole project for easier installation
                  rsync -az --delete ./ \
                        haos:${{ env.HAOS_PROJECT_WORKSPACE }}/

            - name: Run integration tests on HAOS
              run: |
                  ssh haos << 'EOF'
                    set -e # Exit immediately if a command exits with a non-zero status

                    echo "--- Running tests on HAOS ---"
                    # Use the environment variable defined in the GitHub Actions workflow
                    # shellcheck disable=SC2154 # HAOS_PROJECT_WORKSPACE is set by GitHub Actions env
                    cd "${HAOS_PROJECT_WORKSPACE}"

                    echo "Current directory on HAOS after cd: $(pwd)"
                    echo "Listing contents of HAOS workspace ($(pwd)):"
                    ls -la .
                    
                    echo "Checking specifically for pyproject.toml in $(pwd)..."
                    if [ -f "pyproject.toml" ]; then
                        echo "pyproject.toml FOUND in $(pwd)"
                    else
                        echo "ERROR: pyproject.toml NOT FOUND in $(pwd)"
                        exit 1
                    fi

                    echo "Running Docker container for tests..."
                    # $(pwd) will resolve to the absolute path of HAOS_PROJECT_WORKSPACE on the HAOS machine
                    # The bash -c script is now a single-quoted string with commands separated by semicolons.
                    docker run --rm \
                        -v "$(pwd)":/work \
                        -w /work \
                        python:3.13-slim \
                        bash -c '
                          set -e;
                          echo "--- Inside Docker Container ---";
                          echo "Current directory inside Docker: $(pwd)";
                          echo "Listing contents of /work (project root):";
                          ls -la /work/;
                          
                          echo "Checking for /work/pyproject.toml specifically...";
                          if [ -f "/work/pyproject.toml" ]; then
                              echo "pyproject.toml FOUND in /work";
                          else
                              echo "ERROR: pyproject.toml NOT FOUND in /work";
                              exit 1;
                          fi;
                          
                          echo "Upgrading pip...";
                          python -m pip install --upgrade pip;
                          echo "Attempting pip install -e .[test] from /work...";
                          pip install -e .[test];
                          
                          echo "Running pytest...";
                          pytest -v src/kronoterm_voice_actions/test_local/;
                          echo "--- Exiting Docker Container ---"
                        '

                    echo "--- Finished tests on HAOS ---"
                  EOF

    # ──────────────────────── deploy ─────────────────────────
    # deploy:
    #     if: github.ref == 'refs/heads/main'
    #     runs-on: [self-hosted, Linux, ARM]
    #     needs: target_machine_tests

    #     steps:
    #         - uses: actions/checkout@v4

    #         - name: Sync integration to HAOS
    #           run: |
    #               rsync -az src/kronoterm_voice_actions/ \
    #                     haos:/config/custom_components/

    #         - name: Restart Home Assistant
    #           run: |
    #               ssh haos "/usr/bin/ha core restart"
